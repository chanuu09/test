test comment

git init 해당 폴더가 git 저장소가 됨

git add test.txt
git commit -m '메모'  #기록이 됨



git add #기록할 파일을 고르고 staging area
git commit -m "메모할 거 작성임"  #repository 

git add 파일1 파일2 ..
git status 상태 확인
git log --all --oneline commit 내역 조회

--------
수정정 #vscode 내 git 사용이 가능
구체 모양 아이콘의 changes의 +버튼이 git add 
source control의 체크 버튼이 git commit

commit 전 이전 파일과 변경점을 확인하는 것이 좋대
git diff 변경점 확인 가능 jk로 스크롤바 q로 탈출

git difftool 변경점을 좀 더 쉽게 확인 가능 hjkl로 움직임 :q :qa로 탈출

git difftool 커밋아이디  로 특정커밋과 비교 가능

git difftool 커밋아이디1 커밋아이디2  특정 커밋끼리 비교 가능

--------
git branch 브랜치명 #실험용 다른 파일이 생성된다고 생각하셈셈
git switch 브랜치명 #해당 브랜치로 이동

-------
git switch main / master를 통해 메인 브랜치로 이동


git log --oneline --all --graph 를 통해 그래프식으로 표현현

HEAD 는 현재 위치

----------------
브랜치 합치기
git switch main 으로 메인브랜치로
git merge 합칠 브랜치명

똑같은 파일의 똑같은 줄을 수정했을 경우 conflict 발생 <직접 수정해야댐

3-way merge  메인브랜치와 서브브랜치의 commit이 여러 개 존재할 경우
             메인 브랜치에 merge하는 경우

fast-forward merge 메인브랜치의 commit이 없는 경우 서브브랜치를
                   메인브랜치로 인식
                   이렇게 하기 싫으면 git merge --no-ff 브랜치명
                   

브랜치 merge하더라도 남아 있음
git branch -d 브랜치명 < 브랜치 삭제 명령어
git branch -D 브랜치명 < merge 안 한 브랜치 삭제

git rebase 가 존재
    >> 브랜치의 뿌리가 메인의 가장 최근 commit에 연결됨.
    >> 브랜치가 너무 많을 경우 간단하고 짧은 브랜치들 깔끔해지기 가능
    >> -> conflict 많이 발생
git switch 새로운브랜치
git rebase 중심브랜치명
git switch 중심브랜치
git merge 새로운브랜치

-----------------------
git switch main
git merge --squash 새브랜치 #사이드브랜치의 commit 내역이 삭제됨
                   보기 편함
git commit -m "메시지"

git branch -a 전체 목록 보기
git branch -r 리모트 목록 보기
git branch 로컬 목록 보기기

------------------------------
나중에 필요해질 때 궁금하면 검색하는 경우가 많음

git restore 파일명 #가장 최근 commit된 경우로 되돌림

git restore --source 커밋아이디(영어임) 파일명 #해당commit으로 돌림

git restore --staged 파일명 #staging 취소

git revert 커밋아이디 #해당 commit에서 일어난 일 취소 commit publish

git revert 커밋아이디1 커밋아이디2 ...
git revert HEAD #가장 최근 commit 취소
git revert 명령어로 merge 로 만들어진 commit도 취소 가능

git reset --hard 커밋아이디 #사용하면 이후 commit 사용 X
협업 시 문제 발생될 수 있으니 사용 조심


git reset --hard 커밋아이디 #해당 commit으로 돌아감
git reset --soft 커밋아이디 #해당 commit의 파일만 staging area에 남음
git reset --mixed 커밋아이디 #해당 commit파일만 staging 되지 않은 상태

---------------------------

git init repositoty 생성하는 거임임
git branch -M main 기본 브랜치명을 main으로로

git push -u 원격저장소주소 올릴로컬브랜치명(main)
         -u(주소 기억하라는 뜻)
         다음 번에는 git push만 해도 됨

url 변수로 저장 가능
git remote add 변수명 주소소

----------------------------------
원격저장소 복제
git clone 저장소주소

팀원 깃헙아이디 등록해야 git push 가능

원격저장소에 변경이 생기면 git pull 이후 git push
git pull 원격저장소주소 (브랜치) #원격저장소 파일 가져오기
git pull = git fetch(신규commit 가져오기) + git merge

haha

브랜치 이름 중복 알아서 피하기